{"version":3,"sources":["index.tsx"],"names":["inspect","url","iframe","sayColour","send","context","type","value","recResult","say","text","dmMachine","initial","states","init","on","CLICK","welcome","MATCH","target","cond","prompt","entry","ENDSPEECH","ask","stop","always","repaint","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","recognising","exit","assign","event","ASRRESULT","actions","match","speaking","ttsAgenda","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.e33e2fef.chunk.js","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, createMachine, MachineConfig, assign, send, State, interpret, Action, ActionFunction } from \"xstate\";\nimport { useMachine, asEffect, asLayoutEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\ninterface SDSContext {\n    recResult: string;\n    nluData: any;\n    ttsAgenda: string\n}\n\ntype SDSEvent =\n    | { type: 'CLICK' }\n    | { type: 'MATCH' }\n    | { type: 'ASRRESULT', value: string }\n    | { type: 'ENDSPEECH' }\n    | { type: 'LISTEN' }\n    | { type: 'SPEAK', value: string };\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((context: SDSContext) => ({type: \"SPEAK\", value: text}))}\n\nconst dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                MATCH: [\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    { target: 'repaint' }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Tell me the colour\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n            }\n        },\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        },\n        repaint: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: sayColour,\n                    on: { ENDSPEECH: 'repaint' }\n                },\n                repaint: {\n                    entry: 'changeColour',\n                    always: '#root.dm.welcome'\n                }\n            }\n        }\n    }\n})\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: 'speaking'\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: ['recStop', assign<SDSContext>({ recResult: (context: any, event: any) => { return event.value } })],\n                    on: {\n                        ASRRESULT: {\n                            actions: 'recLogResult',\n                            target: 'match'\n                        },\n                    }\n                },\n                match: {\n                    entry: send('MATCH'),\n                    always: 'idle'\n                },\n                speaking: {\n                    entry: [\n                        assign<SDSContext>({ ttsAgenda: (context: any, event: any) => { return event.value } }),\n                        'ttsStart'],\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    const recognising = current.matches({ asrtts: 'recognising' });\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}