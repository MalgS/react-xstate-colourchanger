{"version":3,"sources":["index.tsx"],"names":["colors","grammar","join","speechRecognitionList","webkitSpeechGrammarList","addFromString","grammars","machine","createMachine","id","type","states","dm","initial","init","on","CLICK","askColour","entry","send","ASR_onResult","repaint","asr","idle","LISTEN","listening","actions","assign","recResult","context","event","target","exit","nlu","invoke","src","nluRequest","onDone","nluData","data","onError","tts","SPEAK","speaking","TTS_onEnd","recLogResult","console","log","test","logIntent","intent","name","Hint","prop","style","backgroundColor","App","speak","useSpeechSynthesis","onEnd","useSpeechRecognition","onResult","result","listen","stop","useMachine","recStart","asEffect","interimResults","continuous","recStop","document","body","background","text","current","active","matches","className","map","v","_","onClick","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.051bfc71.chunk.js","sourcesContent":["import \"./styles.css\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, createMachine, assign, send } from \"xstate\";\nimport { useMachine, asEffect, asLayoutEffect } from \"@xstate/react\";\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst colors = ['aqua', 'azure', 'beige', 'bisque', 'black', 'blue', 'brown', 'chocolate',\n    'coral', 'crimson', 'cyan', 'fuchsia', 'ghostwhite', 'gold',\n    'goldenrod', 'gray', 'green', 'indigo', 'ivory', 'khaki', 'lavender',\n    'lime', 'linen', 'magenta', 'maroon', 'moccasin', 'navy', 'olive',\n    'orange', 'orchid', 'peru', 'pink', 'plum', 'purple', 'red', 'salmon',\n    'sienna', 'silver', 'snow', 'tan', 'teal', 'thistle', 'tomato',\n    'turquoise', 'violet', 'white', 'yellow'];\nconst grammar = '#JSGF V1.0; grammar colors; public <color> = ' + colors.join(' | ') + ' ;'\n\n/* var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList */\nconst speechRecognitionList = new webkitSpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\nconst grammars = speechRecognitionList;\n\ninterface SDSContext {\n    recResult: string;\n    nluData: any\n}\n\nconst machine = createMachine<SDSContext>({\n    id: 'machine',\n    type: 'parallel',\n    states: {\n        dm: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: 'askColour'\n                    }\n                },\n                askColour: {\n                    entry: send('LISTEN'),\n                    on: { ASR_onResult: 'repaint' }\n                },\n                repaint: {\n                    entry: [send('SPEAK'), 'repaint'],\n                    on: {\n                        CLICK: 'askColour'\n                    }\n                }\n            }\n        },\n\n        asr: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'listening',\n                    }\n                },\n                listening: {\n                    entry: 'recStart',\n                    on: {\n                        ASR_onResult: {\n                            actions: [\n                                assign<SDSContext>({ recResult: (context: any, event: any) => { return event.recResult } }),\n                                'recLogResult'\n                            ],\n                            target: 'nlu'\n                        },\n                    },\n                    exit: 'recStop'\n                },\n                nlu: {\n                    invoke: {\n                        id: 'getNLU',\n                        src: (context) => nluRequest(context.recResult),\n                        onDone: {\n                            target: 'idle',\n                            actions: [\n                                assign<SDSContext>({ nluData: (context: any, event: any) => { return event.data } }),\n                                'logIntent'\n                            ]\n                        },\n                        onError: {\n                            target: 'idle',\n                            actions: ['nluSaveResult']\n                        }\n                    }\n                }\n            }\n        },\n\n        tts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: { SPEAK: 'speaking' },\n                },\n                speaking: {\n                    entry: 'speak',\n                    on: {\n                        TTS_onEnd: 'idle'\n                    }\n                }\n            }\n        }\n    }\n\n\n},\n    {\n        actions: {\n            recLogResult: (context) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface HintProp {\n    name: string;\n}\nfunction Hint(prop: HintProp) {\n    return <span style={{ backgroundColor: prop.name }}>{' ' + prop.name}</span>\n}\n\nfunction App() {\n    const { speak } = useSpeechSynthesis({\n        onEnd: () => {\n            send('TTS_onEnd');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASR_onResult\", recResult: result });\n        },\n    });\n    const [current, send] = useMachine(machine, {\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: false,\n                    grammars: grammars\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            repaint: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            speak: asEffect((context) => {\n                console.log('Speaking...');\n                speak({ text: 'I heard ' + context.recResult })\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n                *     speak({text: context.ttsAgenda })\n                * } */\n        }\n    });\n    const active = current.matches(\"listening\");\n    return (\n        <div className=\"App\">\n            {/* <h1>XState React ColourChanger</h1> */}\n            <p>\n                Tap / click then say a color to change the background color of the box.Try\n\t    {colors.map((v, _) => <Hint name={v} />)}.\n\t    </p>\n            <button onClick={() => send('CLICK')}>\n                ðŸŽ¤ {active ? 'Listening...' : 'Click me!'}\n            </button>\n        </div>\n    );\n}\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}