{"version":3,"sources":["index.tsx"],"names":["grammar","join","speechRecognitionList","webkitSpeechGrammarList","addFromString","grammars","sayColour","send","context","type","value","recResult","machine","Machine","id","states","dm","initial","init","on","CLICK","welcome","MATCH","prompt","entry","text","ENDSPEECH","ask","repaint","always","asrtts","idle","LISTEN","SPEAK","recognising","exit","assign","event","actions","target","speaking","ttsAgenda","recLogResult","console","log","test","logIntent","nluData","intent","name","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","style","background","ttsStart","effect","ttsCancel","current","matches","className","animation","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.b3d90932.chunk.js","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, createMachine, assign, send } from \"xstate\";\nimport { useMachine, asEffect, asLayoutEffect } from \"@xstate/react\";\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n/* import useSpeechRecognition from './asr'; */\n\nimport AudioAnalyser from './AudioAnalyser';\n\nconst colors = ['aqua', 'azure', 'beige', 'bisque', 'black', 'blue', 'brown', 'chocolate',\n    'coral', 'crimson', 'cyan', 'fuchsia', 'ghostwhite', 'gold',\n    'goldenrod', 'gray', 'green', 'indigo', 'ivory', 'khaki', 'lavender',\n    'lime', 'linen', 'magenta', 'maroon', 'moccasin', 'navy', 'olive',\n    'orange', 'orchid', 'peru', 'pink', 'plum', 'purple', 'red', 'salmon',\n    'sienna', 'silver', 'snow', 'tan', 'teal', 'thistle', 'tomato',\n    'turquoise', 'violet', 'white', 'yellow'];\nconst grammar = '#JSGF V1.0; grammar colors; public <color> = ' + colors.join(' | ') + ' ;'\n\n/* var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList */\nconst speechRecognitionList = new webkitSpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\nconst grammars = speechRecognitionList;\n\ninterface SDSContext {\n    recResult: string;\n    nluData: any;\n    ttsAgenda: string\n}\n\ntype SDSEvent =\n    | { type: 'CLICK' }\n    | { type: 'MATCH', value: string }\n    | { type: 'ENDSPEECH' }\n    | { type: 'LISTEN' }\n    | { type: 'SPEAK', value: string };\n\nconst sayColour = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nconst say = (text: string) => send((context: SDSContext) => ({\n    type: \"SPEAK\", value: text\n}))\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'machine',\n    type: 'parallel',\n    states: {\n        dm: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: 'welcome'\n                    }\n                },\n                welcome: {\n                    initial: 'prompt',\n                    on: { MATCH: 'repaint' },\n                    states: {\n                        prompt: {\n                            entry: say(\"Tell me the colour\"),\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                repaint: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: sayColour,\n                            on: { ENDSPEECH: 'repaint' }\n                        },\n                        repaint: {\n                            entry: 'changeColour',\n                            always: '#machine.dm.welcome'\n                        }\n                    }\n                }\n            }\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: 'speaking'\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: ['recStop', assign<SDSContext>({ recResult: (context: any, event: any) => { return event.value } })],\n                    on: {\n                        MATCH: {\n                            actions: 'recLogResult',\n                            target: 'idle'\n                        },\n                    }\n                },\n                speaking: {\n                    entry: [\n                        assign<SDSContext>({ ttsAgenda: (context: any, event: any) => { return event.value } }),\n                        'ttsStart'],\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface HintProp {\n    name: string;\n}\ninterface MicProp {\n    active: boolean;\n}\nfunction Hint(prop: HintProp) {\n    return <span style={{ backgroundColor: prop.name }}>{' ' + prop.name}</span>\n}\n\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"MATCH\", value: result });\n        },\n    });\n    const [current, send] = useMachine(machine, {\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: false,\n                    grammars: grammars\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n    const recognising = current.matches({ asrtts: 'recognising' });\n    switch (true) {\n        case current.matches({ asrtts: 'recognising' }):\n            return (\n                <div className=\"App\">\n                    <button type=\"button\" className=\"glow-on-hover\"\n                        style={{ animation: \"glowing 20s linear\" }}>\n                        Listening...\n                    </button>\n                </div >\n            );\n        case current.matches({ asrtts: 'speaking' }):\n            return (\n                <div className=\"App\">\n                    <button type=\"button\" className=\"glow-on-hover\"\n                        style={{ animation: \"bordering 1s infinite\" }}>\n                        Speaking...\n                    </button>\n                </div >\n            );\n        default:\n            return (\n                <div className=\"App\">\n                    <button type=\"button\" className=\"glow-on-hover\" onClick={() => send('CLICK')}>\n                        Click to start\n                    </button>\n                </div>\n            );\n    }\n};\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}